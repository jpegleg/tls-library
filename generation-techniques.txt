G E N E R A T E cryptographic components



###############################################################################################################################
#  v3 extension file for version 3 certificate creation                                                                       #
###############################################################################################################################

[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name

[req_distinguished_name]
countryName = XX
countryName_default = XX
stateOrProvinceName = XX
localityName = XX
localityName_default = XX
organizationalUnitName = XX
organizationalUnitName_default = XX
commonName = TEMPLATE
commonName_max = 64

[v3_req]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = TEMPLATE



###############################################################################################################################
#  RSA examples                                                                                                               #
###############################################################################################################################

# 4096 RSA key generation
openssl genrsa 4096 > rsa.pem

# 2048 RSA key generation
openssl genrsa 2048 > rsa.pem

# create CA certificate
openssl req -sha256 -new -x509 -key rsa.pem -out ca.crt -days 3650

# RSA key CSR creation
SUBJECT="/C=XX/ST=XX/L=XX/O=XX/OU=XX/CN=XX" # populate values, replace XX with your details
SUBJECT="/C=XX/ST=XX/L=XX/O=system:nodes/OU=XX/CN=system:node:YOURTHING" # example for k8s PKI requirements
openssl req -sha256 -nodes -out CSR.csr -new -key rsa.pem -config v3.ext -subj "${SUBJECT}"

# RSA sign (version 1, will not have browser trust, do version 3 certificates for browser usage)
openssl x509 -req -days 360 -in CSR.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out example.crt -sha256

# RSA sign version 3 (identical for other types, works for all algos)
if [ -f ca-intermediate.srl ]; then
  openssl x509 -req -days 365 -in CSR.csr -extfile v3.ext -CA ca-intermediate.crt -CAkey intermediate.key -out rsa.crt -sha256 -CAserial ca-intermediate.srl -extensions 'v3_req'
else
  openssl x509 -req -days 365 -in CSR.csr -extfile v3.ext -CA ca-intermediate.crt -CAkey intermediate.key -out rsa.crt -sha256 -CAcreateserial -extensions 'v3_req'
fi

# k8s sign
cat <<EOF | kubectl apply -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: YOURTHING.default
spec:
  request: $(cat CSR.csr | base64 | tr -d '\n')
  signerName: kubernetes.io/kubelet-serving
  usages:
  - digital signature
  - key encipherment
  - server auth
EOF
kubectl certificate approve YOURTHING.default

# extract RSA public key from private key
openssl rsa -in rsa-key.pem -pubout > rsa.pub

# extract RSA public key from certificate
openssl x509 -in extract.crt  -noout -pubkey > cert.pub

# RSA sign file
openssl rsautl -sign -in input.txt -inkey rsa.pem -out output.sign

# RSA verify signed file
openssl rsautl -verify -in output.sign -inkey rsa.pub -pubin

# Generate encrypted (symmetric password) RSA private key and self signed certificate
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365



###############################################################################################################################
#  (ecparam) examples with secp384r1, replace with any curve available, see below                                             #
###############################################################################################################################

# list curves
openssl ecparam -list_curves

# secp384r1 key generation
openssl ecparam -name secp384r1 -genkey -noout -out secp384r1.pem

# secp384r1 CSR creation (identical for other types, works for all algos)
SUBJECT="/C=XX/ST=XX/Locality=XX/O=Heaven/OU=XX/CN=XX" # populate values, replace XX with your details
openssl req -sha256 -nodes -out CSR.csr -new -key secp384r1.pem -config v3.ext -subj "${SUBJECT}"

# create CA certificate
openssl req -sha256 -new -x509 -key secp384r1.pem -out ca.crt -days 3650

# secp384r1 sign (identical for other types, works for all algos)
if [ -f ca-intermediate.srl ]; then
  openssl x509 -req -days 365 -in CSR.csr -extfile v3.ext -CA ca-intermediate.crt -CAkey intermediate.key -out secp384r1.crt -sha256 -CAserial ca-intermediate.srl -extensions 'v3_req'
else
  openssl x509 -req -days 365 -in CSR.csr -extfile v3.ext -CA ca-intermediate.crt -CAkey intermediate.key -out secp384r1.crt -sha256 -CAcreateserial -extensions 'v3_req'
fi

# secp384r1 public key
openssl ec -in secp384r1.pem -pubout -out secp384r1.pub

# secp384r1 derive shared secret
openssl pkeyutl -derive -inkey secp384r1.pem -peerkey peerpub.pem -out secret.bin

# create signature file
openssl dgst -ecdsa-with-SHA1 -sign secp384r1.pem test.pdf > signature.bin

# verify signature
openssl dgst -ecdsa-with-SHA1 -verify secp384r1.pub -signature signature.bin test.pdf



###############################################################################################################################
#  generate DH params                                                                                                         #
###############################################################################################################################

# 2048 bit
openssl dhparam -out /etc/dhparam-2048 2048

# 4096 bit
openssl dhparam -out /etc/dhparam-4096 4096



###############################################################################################################################
#  java keytool                                                                                                               #
###############################################################################################################################

keytool -genkey -keyalg RSA -alias examplealias -keystore keystore.jks

keytool -genkey -alias mydomain -keyalg RSA -keystore keystore.jks  -keysize 2048

keytool -certreq -alias mydomain -keystore keystore.jks -file mydomain.csr

keytool -import -trustcacerts -alias root -file Thawte.crt -keystore keystore.jks

keytool -import -trustcacerts -alias mydomain -file mydomain.crt -keystore keystore.jks

keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass password -validity

keytool -delete -alias mydomain -keystore keystore.jks

keytool -storepasswd -new new_storepass -keystore keystore.jks

keytool -export -alias mydomain -file mydomain.crt -keystore keystore.jks

